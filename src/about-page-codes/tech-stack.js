const code = [
    "# THIS CODE GENERATES MY TECH STACK",
    "",
    "import torch",
    "from transformers import BertTokenizer, BertForTokenClassification, pipeline",
    "import PyPDF2",
    "",
    "# Function to parse the PDF document",
    "def parse_pdf(file_path):",
    "    with open(file_path, \"rb\") as file:",
    "        reader = PyPDF2.PdfReader(file)",
    "        full_text = []",
    "        for page_num in range(len(reader.pages)):",
    "            page = reader.pages[page_num]",
    "            full_text.append(page.extract_text())",
    "    return \"\\n\".join(full_text)",
    "",
    "# Load pre-trained NER model and tokenizer",
    "tokenizer = BertTokenizer.from_pretrained(\"dbmdz/bert-large-cased\")",
    "model = BertForTokenClassification.from_pretrained(\"dbmdz/bert-large-cased\")",
    "",
    "# Initialize the NER pipeline",
    "ner_pipeline = pipeline(\"ner\", model=model, tokenizer=tokenizer)",
    "",
    "# Function to extract tech stack dynamically using NER",
    "def extract_tech_stack(parsed_text):",
    "    ner_results = ner_pipeline(parsed_text)",
    "",
    "    tech_stack = set()",
    "    for entity in ner_results:",
    "        if entity['entity'].startswith('B-') or entity['entity'].startswith('I-'):",
    "            tech_stack.add(entity['word'].lower())",
    "",
    "    return tech_stack",
    "",
    "def main():",
    "    file_path = \"resume.pdf\"",
    "    parsed_text = parse_pdf(file_path)",
    "    tech_stack = extract_tech_stack(parsed_text)",
    "",
    "    if tech_stack:",
    "        print(\"Extracted Tech Stack:\")",
    "        print(\", \".join(tech_stack))",
    "    else:",
    "        print(\"No tech stack found.\")",
    "",
    "if __name__ == \"__main__\":",
    "    main()",
    ""
];

export default code;  